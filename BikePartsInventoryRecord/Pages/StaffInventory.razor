@page "/staffInventory"
@using BikePartsInventoryRecord.Data
<h3>Staff Inventory</h3>

<div class="form-group">
    <input id="search" type="text" class="form-control" @bind="_searchTerm" placeholder="Search by item name" />
    <button class="btn btn-primary" type="button" @onclick="SearchInventory">Search</button>
</div>

<div class="form-group">
    <label for="sortField">Sort by:</label>
    <select id="sortField" class="form-control" @bind="_sortField">
        <option value="quantity">Quantity</option>
        <option value="itemName">Item Name</option>
    </select>
    <button class="btn btn-secondary" type="button" @onclick="SortInventory">Sort</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Items</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var inventoryItem in _inventoryItems)
        {
            <tr>
                <td>@inventoryItem.ItemName</td>
                <td>@inventoryItem.Quantity.ToString()</td>

                <button class="btn btn-outline-secondary" type="button" @onclick="()=>OpenWithdrawlInventoryDialog(inventoryItem)">
                    <span class="oi oi-pencil" /> Withdraw
                </button>
            </tr>
        }
    </tbody>


</table>


@if (_showWithdrawlInventoryDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnStaffInventoryDialogClose" OkLabel="@_dialogOkLabel">
        <h1></h1>
        <div class="form-floating">
            <input id="itemName" type="text" class="form-control" @bind="_inventoryModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="quantity" type="text" class="form-control"  @bind="_inventoryModel.Quantity"  placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>


        @if (!string.IsNullOrEmpty(_editInventoryErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editInventoryErrorMessage" />
        }
    </ModalDialog>
}

@code {

    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<InventoryItems> _inventoryItems { get; set; }
    private bool _showAddItemDialog { get; set; }
    private bool _showDeleteUserDialog { get; set; }
    private string _addUserErrorMessage { get; set; }
    private string _searchTerm { get; set; }
    private string _deleteUserErrorMessage { get; set; }
    private User _deleteUser { get; set; }
    private List<User> _users { get; set; }
    private string _itemName { get; set; }
    private string _quantity { get; set; }
    private bool _showWithdrawlInventoryDialog { get; set; }



    private string _editInventoryErrorMessage { get; set; }
    private string _deleteInventoryErrorMessage { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private InventoryItems _inventoryModel { get; set; }

    private List<WithdrawlItem> _withdrawlItems { get; set; }





    private void SearchInventory()
    {
        _inventoryItems = InventoryService.GetAll().Where(i => i.ItemName.Contains(_searchTerm)).ToList();
    }

    private string _sortField { get; set; }

    private void SortInventory()
    {
    switch (_sortField)
    {
        case "quantity":
            _inventoryItems = _inventoryItems.OrderBy(i => i.Quantity).ToList();
            break;
        case "itemName":
            _inventoryItems = _inventoryItems.OrderBy(i => i.ItemName).ToList();
            break;
        default:
            break;
    }
}



    protected override void OnInitialized()
    {
        _inventoryItems = InventoryService.GetAll();
        _withdrawlItems = WithdrawlService.GetAll(_globalState.CurrentUser.Id);
    }

    private void OpenWithdrawlInventoryDialog(InventoryItems editInventory)
    {
        DateTime currentTime = DateTime.Now;

        

        _dialogTitle = "Withdraw Items";
        _dialogOkLabel = "Withdraw";
        _inventoryModel = editInventory;
        _showWithdrawlInventoryDialog = true;
    }

    private void OnStaffInventoryDialogClose(bool isCancel)
    {


        if (isCancel)
        {
            _showWithdrawlInventoryDialog = false;
        }
        else
        {
           
            try
            {
                _editInventoryErrorMessage = "";
                if (_inventoryModel.Id == Guid.Empty)
                {
                    _inventoryItems = InventoryService.Create(_globalState.CurrentUser.Id, _globalState.CurrentUser.Username, _inventoryModel.ItemName, _inventoryModel.Quantity);
                }
                else
                {
                    _inventoryItems = InventoryService.WithdrawItem(_globalState.CurrentUser.Id, _inventoryModel.Id, _inventoryModel.ItemName, _inventoryModel.Quantity);
                    Console.WriteLine(_inventoryModel.ItemName);
                }
                _withdrawlItems = WithdrawlService.Create(_globalState.CurrentUser.Id, _inventoryModel.Id, _inventoryModel.ItemName,_inventoryModel.Quantity, _globalState.CurrentUser.Username);
                Console.WriteLine("Successfully Added to next Array");
                _showWithdrawlInventoryDialog = false;
            }
            catch (Exception e)
            {
                _editInventoryErrorMessage = e.Message;
            }
        }





    }

}
